from sklearn.model_selection import train_test_split
bg = pd.read_csv(r'F:/pandas_data/bga.csv')
print(bg)
print(bg.columns)
print(bg.shape)
print(bg.describe())

# draw a histogram of all the ratings in the average_rating column
plt.hist(bg['average_rating'])
plt.show()
plt.hist(bg['average_weight']) 
plt.show() 

# print the first row of all the games with zero scores
print(bg[bg['average_rating'] == 0].iloc[0])
# print the first row of all the games greater than zero scores
print(bg[bg['average_rating'] > 0].iloc[0])

# Remove any rows without user reviews
bg  = bg[bg['users_rated'] > 0]

# Remove any rows with missing vlues 
bg =bg.dropna(axis = 0)

#draw a histgram og all the average ratings
plt.hist(bg['average_rating'])
plt.show()
print(bg.columns)

 #Correlation matrix 
cormat = bg.corr()
fig = plt.figure(figsize = (12,9))
sns.heatmap(cormat,vmax = .8,square = True)
plt.show()

#Get all the columns from the dataframe
columns = bg.columns.tolist()

# Filter the columns to remove data we do not want 
columns = [c for c in columns if c not in ['bayes_average_rating','average_rating','type','name','id']]

#Store the variable we will predicting on
target = 'average_rating'

# Generate traing and test datasets 
from sklearn.model_selection import train_test_split

# Generate training set
train = bg.sample(frac=0.8,random_state = 1)

#Select anything not in the training set and put it in test
test = bg.loc[~bg.index.isin(train.index)] 

#Print shapes
print(train.shape)
print(test.shape)  #big data

#import linear regression model 
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

#Initialize the model class
LR = LinearRegression()

#fit the model the traing class
LR.fit(train[columns],train[target])

#Generate predictions for the test set
predictions = LR.predict(test[columns])
# Compute the error between our test predictions and actual values
print(mean_squared_error(predictions,test[target]))

#import random forest model 
from sklearn.ensemble import RandomForestRegressor
#initialize the model 
RFR = RandomForestRegressor(n_estimators = 100,min_samples_leaf=10,random_state = 1)

#Fit to the data
RFR.fit(train[columns],train[target])

#make predictions
predictions = RFR.predict(test[columns])
#compute the error between our predictions and actual values
print(mean_squared_error(predictions,test[target]))


#Have a look atthe information of the board game in the test dataset 
print(test[columns].iloc[1])

print(test[columns].iloc[1000])

#predict some results in two ways 
rating_LR = LR.predict(test[columns].iloc[0].values.reshape(1,-1))
rating_RFR = RFR.predict(test[columns].iloc[0].values.reshape(1,-1))
print(rating_LR)
print(rating_RFR)
print(test[target].iloc[0])
