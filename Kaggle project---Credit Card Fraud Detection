import numpy as np 
import pandas as pd 
import seaborn  as sns
import matplotlib.pyplot as plt 
# download the dataset 
cc = pd.read_csv (r'F:/pandas_data/creditcard.csv')

# explore more information of the dataset 
print(cc.columns)
print(cc.head(10)) 
print(cc.shape)
print(cc.describe())
cc = cc.sample(frac = 0.1 , random_state = 1)
print(cc.shape)

# draw the histgram pictures 
cc.hist(figsize = (20,20))
plt.show()

#Determine number of fraud cases in the dataset 
Fraud = cc[cc['Class'] == 1]
Valid = cc[cc['Class'] == 0]
outlier_fraction = len(Fraud) / float(len(Valid))
print(outlier_fraction)

print('Fraud Cases : {}'.format(len(Fraud)))
print('Valid Cases : {}'.format(len(Valid)))

# Correlation matrix 
corrmat = cc.corr()
fig = plt.figure(figsize = (12, 9))
sns.heatmap(corrmat,vmax = .8,square = True)
plt.show()
# Get all the columns from the DataFrame 
columns = cc.columns.tolist()

#Filter the columns to remove data we do not want 
columns = [a for a in columns if a not in ['Class']]

#Store the variable we'll be predicting on 
target = 'Class'
X = cc[columns]
Y = cc[target]

#print the shapes of X and Y
print(X.shape)
print(Y.shape) 

#applying the algorithms to the project (unsupervised learning )
from sklearn.metrics import classification_report,accuracy_score
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor

#define a random state 
state = 1

#define the outlier detection methods 
classifiers = {
        'Isolation Forest': IsolationForest(max_samples=len(X),
                                            contamination = outlier_fraction,
                                            random_state = state),
        'Local Outlier Factor': LocalOutlierFactor(
        n_neighbors = 20,
        contamination = outlier_fraction)        
}

#Fit the model 
n_outliers = len(Fraud)

for i,(clf_name,clf) in enumerate(classifiers.items()):
    
    #fit the data and tag outliers 
    if clf_name == 'Local Outlier Factor':
        y_pred = clf.fit_predict(X)
        scores_pred = clf.negative_outlier_factor_
    else:
        clf.fit(X)
        scores_pred = clf.decision_function(X)
        y_pred = clf.predict(X)
        
        #Reshape the prediction values to 0 for valid ,1 for fraud
        y_pred[y_pred==1] = 0
        y_pred[y_pred== -1] = 1
        
        n_errors = (y_pred != Y).sum()
        
        #Run classification metrics
    print('{}: {}'.format(clf_name ,n_errors))
    print(accuracy_score(Y,y_pred))
    print(classification_report(Y,y_pred))
